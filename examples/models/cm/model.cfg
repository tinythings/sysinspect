name: Configuration management example
version: "0.1"
description: |
  Configuration management example model

maintainer: John Smith <js@javascriptsucks.com>
checkbook:
relations:
entities:
  file-ops:
    claims:
      $:
        - netconfig:
            name: /tmp/networks.bkp
        - groups:
            src: file:///etc/group
            dst: /tmp/group.bkp

actions:
  download-netconfig:
    descr: Download network cfg to /tmp
    module: fs.file
    bind:
      - file-ops

    state:
      $:
        opts:
          - create
        args:
          name: "claim(netconfig.name)"
          pull: "/networks"

  info-netconfig:
    descr: Display information about network cfg
    module: fs.file

    # Process only if "download-netconfig" was successful
    if-true:
      - download-netconfig
    bind:
      - file-ops
    state:
      $:
        opts:
          - info
        args:
          name: "claim(netconfig.name)"

  delete-netconfig:
    descr: Delete network cfg file
    module: fs.file

    # Process only if "download-netconfig" was successful
    if-true:
      - download-netconfig

    bind:
      - file-ops
    state:
      $:
        opts:
          - delete
        args:
          name: "claim(netconfig.name)"

  copy-groups:
    descr: Copy /etc/group to /tmp
    module: fs.file
    bind:
      - file-ops
    state:
      $:
        opts:
          - create
        args:
          pull: "claim(groups.src)"
          name: "claim(groups.dst)"

  info-groups:
    descr: Display informatino about groups file
    module: fs.file
    bind:
      - file-ops
    state:
      $:
        opts:
          - info
        args:
          name: "claim(groups.dst)"

  delete-groups:
    descr: Delete network cfg file
    module: fs.file
    if-true:
      - info-groups
    bind:
      - file-ops
    state:
      $:
        opts:
          - delete
        args:
          name: "claim(groups.dst)"

constraints:
  download-netconfig:
    descr: Verify if the netconfig was actually downloaded
    entities:
      - file-ops
    all:
      $:
        - fact: changed
          equals: true

  delete-netconfig:
    descr: Networks config should be removed
    entities:
      - file-ops

    all:
      $:
        - fact: changed
          equals: true

  info-groups:
    descr: Check if groups file is there
    entities:
      - file-ops
    all:
      $:
        - fact: changed
          equals: true

events:
  $/$/$/$:
    handler:
      - console-logger
      - outcome-logger

    console-logger:
      concise: false
      prefix: CfgMgmt

    outcome-logger:
      prefix: CfgMgmt


telemetry:
  # minions selector (traits or globe)
  - select:
      - "system.os:Ubuntu"
      - "system.cpu:x86_64"
    data:
      # Cycles/operations selector.
      # Can select only within the minion scope
      - operation-label.result.in.data
      - other-label.some.other.data

    # Telemetry type
    type: log # or metric in a future

    # Convert into another type. Default is always "json"
    into: string

    # Optionally format into a static data.
    # Pattern should correspond the order and amount of
    # "data" selector above:
    line: "This is {} and {} data"

  - select:
      - "web*"
    data:
      - other-label.everything
    type: log
